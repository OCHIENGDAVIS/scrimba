{"version":3,"sources":["components/Header.js","components/Action.js","components/Option.js","components/Options.js","components/AddOpton.js","components/Counter.js","components/Visibilty.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subtitle","Action","onClick","pick","disabled","options","length","remove","Option","option","e","removeOne","Options","map","key","AddOption","state","error","addOption","setState","add","handleAddOption","preventDefault","persist","target","value","type","placeholder","name","this","onChange","undefined","Component","OptionModal","isOpen","contentLabel","ariaHideApp","onRequestClose","close","choice","console","log","App","prevState","concat","handlePick","choiceIndex","Math","floor","random","one","filter","x","closeModal","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a202250.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header  = (props)=>{\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"container\"> \r\n                    <h1>{props.title}</h1>\r\n                    <p>{props.subtitle}</p>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Action = (props)=>{\r\n   \r\n   \r\n        return(\r\n            <div>\r\n                <div className=\"container container-remove-all\">\r\n                    <button \r\n                    onClick={props.pick} \r\n                    disabled={props.options.length <= 0 }\r\n                    className=\"bigButton\"\r\n                        >What should I do?</button>\r\n                    <button \r\n                    onClick={props.remove} \r\n                    disabled={props.options.length <= 0 }\r\n                    className=\"btn\"\r\n                    \r\n                    \r\n                    >Remove all</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n}\r\nexport default Action","import React from 'react'\r\n\r\nconst Option  = (props)=>{\r\n  \r\n        return(\r\n            <div className=\"listItem\">\r\n                <li>{props.option}</li> \r\n                <button \r\n                onClick={(e)=>{props.removeOne(props.option)}}\r\n                className=\"btn-link\"\r\n                \r\n                >remove</button> \r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n\r\nexport default Option\r\n","import React from 'react'\r\nimport Option from './Option'\r\n\r\nconst  Options = (props)=>{\r\n    return(\r\n        <div>\r\n            <div className=\"container container-main\">\r\n                {props.options.length > 0 ? <p className=\"\">Here are your Options</p> : <p>No options, please add some.</p>}\r\n                <ul>\r\n                {\r\n                    props.options.map((option, key)=>{\r\n                        return <Option \r\n                            option={option} \r\n                            key={key}\r\n                            removeOne={props.removeOne}\r\n                        />\r\n                    })\r\n                }\r\n                </ul>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n    \r\n}\r\nexport default Options\r\n\r\n","import React, {Component} from 'react'\r\n\r\n\r\nclass AddOption extends Component{\r\n    state ={\r\n        option : '',\r\n        error : false\r\n    }\r\n    addOption = ()=>{\r\n        if(this.state.option === ''){\r\n            this.setState(()=>{\r\n                return {\r\n                    error : true\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            this.props.add(this.state.option)\r\n            this.setState(()=>{\r\n                return {\r\n                    error : false,\r\n                    option : ''\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    handleAddOption = (e)=>{\r\n        e.preventDefault()\r\n        e.persist()\r\n        const option = e.target.value\r\n        this.setState(()=>{\r\n            return {\r\n                option : option\r\n            }\r\n        })\r\n        \r\n\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                \r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Your option\" \r\n                        name=\"option\"  \r\n                        value={this.state.option}\r\n                        onChange={this.handleAddOption}\r\n                    />\r\n                    \r\n                    <button onClick={this.addOption} className=\"btn btn-add\">Add Option</button> <br />\r\n                    {this.state.error ? <span className='error'>*Option cannot be empty*</span> : undefined}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddOption","import React, { Component } from 'react'\r\n\r\nclass Counter extends Component{\r\n    state = {\r\n        count : 0\r\n    }\r\n    add = ()=>{\r\n        console.log('add one.....')\r\n        this.setState((prevState)=>{\r\n            console.log(prevState)\r\n            return{\r\n                count : prevState.count + 1\r\n            }\r\n        })\r\n    }\r\n    subtract = ()=>{\r\n        console.log('remove one....')\r\n        this.setState((prevState)=>{\r\n            return {\r\n                count : prevState.count -1\r\n            }\r\n        })\r\n    }\r\n    reset = ()=>{\r\n        console.log('setting....')\r\n        this.setState((prevState)=>{\r\n            return {\r\n                count : 0\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>Counter: {this.state.count}</h1>\r\n                <button onClick={this.add}>Add One</button>\r\n                <button onClick={this.subtract}>Subtract One</button>\r\n                <button onClick={this.reset}>Reset</button>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter","import React, { Component } from 'react'\r\n\r\nclass Visibility extends Component{\r\n    state = {\r\n        show : false,\r\n        btnText : '',\r\n        text : 'Here is some text to show'\r\n\r\n    }\r\n    screem = ''\r\n    toggle = ()=>{\r\n        this.setState((prevState)=>{\r\n            return{\r\n                show : !prevState.show\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <button onClick={this.toggle}>{this.state.show ? 'hide text' : 'show text'}</button>\r\n                {\r\n                    this.state.show ? <p>{this.state.text}</p> : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Visibility","import React from 'react'\r\n\r\nimport Modal from 'react-modal';\r\n\r\nconst OptionModal = (props)=> {\r\n        return (\r\n            <div className=\"container\">\r\n                <Modal\r\n                    isOpen={props.isOpen}\r\n                    contentLabel={'Selected option'}\r\n                    ariaHideApp={false}\r\n                    onRequestClose={props.close}\r\n                    >\r\n                    <h3>Selected Option</h3>\r\n                    {\r\n                        !!props.choice ? <p>{props.choice}</p> : null\r\n                    }\r\n                    {console.log(props.choice)}\r\n                    <button onClick={props.close}>Okay</button>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default OptionModal","import React from 'react';\r\nimport Header from './components/Header'\r\nimport Action from './components/Action'\r\nimport Options from './components/Options'\r\nimport AddOptions from './components/AddOpton'\r\nimport Counter from './components/Counter'\r\nimport Visibilty from './components/Visibilty'\r\nimport OptionModal from './components/Modal'\r\nimport './App.css'\r\n\r\n\r\nclass  App extends React.Component {\r\n  state = {\r\n    options : [],\r\n    isOpen : false,\r\n    choice : undefined\r\n  }\r\n  handleAddOption = (option)=>{\r\n    this.setState((prevState)=>{\r\n      return{\r\n        options : prevState.options.concat(option)\r\n      }\r\n    })\r\n  }\r\n  handlePick = ()=>{\r\n    let choiceIndex = Math.floor(Math.random()*this.state.options.length)\r\n    this.setState((prevState)=>{\r\n      return {\r\n        isOpen : !prevState.isOpen,\r\n        choice : prevState.options[choiceIndex]\r\n       \r\n      }\r\n    })\r\n    console.log()\r\n  }\r\n  remove = ()=>{\r\n    this.setState(()=>{\r\n      return{\r\n        options : []\r\n      }\r\n    })\r\n  }\r\n  removeOne= (one)=>{\r\n    this.setState((prevState)=>{\r\n      return {\r\n        options : prevState.options.filter((x)=>x!==one)\r\n      }\r\n    })\r\n  }\r\n  closeModal = ()=>{\r\n    this.setState((prevState)=>{\r\n      return {\r\n        isOpen : !prevState.isOpen\r\n      }\r\n    })\r\n  }\r\n  render(){\r\n\r\n    return(\r\n          \r\n          <div >\r\n            <Header title=\"Indecision App\" subtitle=\"Put your life in the hands of a computer\"/>\r\n            <Options options={this.state.options} removeOne={this.removeOne} />\r\n            <Action pick={this.handlePick}  remove={this.remove} options={this.state.options} />\r\n            <OptionModal choice={this.state.choice} isOpen={this.state.isOpen} close={this.closeModal}/>\r\n            <AddOptions add={this.handleAddOption}/>\r\n          </div>\r\n\r\n      \r\n    )\r\n  }\r\n  \r\n  \r\n}\r\n \r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}